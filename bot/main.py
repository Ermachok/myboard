import asyncio
import os

import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv

load_dotenv()

API_URL = "http://localhost:8000/api"
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

dp = Dispatcher()

# –í—Ä–µ–º–µ–Ω–Ω—ã–π storage —Ç–æ–∫–µ–Ω–∞ (–≤ –±—É–¥—É—â–µ–º ‚Äî —Å–µ—Å—Å–∏–∏/–ë–î)
token: str | None = None


@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π /login —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è."
    )


@dp.message(Command("login"))
async def cmd_login(message: Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: <email> <password>", parse_mode=None
    )


@dp.message()
async def handle_login_or_command(message: Message):
    global token
    if "@" in message.text and " " in message.text:
        try:
            email, password = message.text.strip().split(" ", 1)
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: <email> <password>")
            return

        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{API_URL}/users/login", json={"email": email, "password": password}
            )
            if response.status_code == 200:
                token = response.json()["token"]
                await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.")
    elif message.text.startswith("/boards"):
        if not token:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —Å –ø–æ–º–æ—â—å—é /login.")
            return

        async with httpx.AsyncClient() as client:
            headers = {"Authorization": f"Bearer {token}"}
            response = await client.get(
                f"{API_URL}/boards/?skip=0&limit=100", headers=headers
            )
            if response.status_code == 200:
                boards = response.json()
                if not boards:
                    await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å–æ–∫.")
                else:
                    text = "\n".join(
                        [f"üìù {board['title']} (ID: {board['id']})" for board in boards]
                    )
                    await message.answer(f"–¢–≤–æ–∏ –¥–æ—Å–∫–∏:\n{text}")
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å–∫–∏.")
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
